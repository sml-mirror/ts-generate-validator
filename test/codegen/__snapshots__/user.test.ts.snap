// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen/user create validators: generated validators at "src/generated/validators/model.ts" 1`] = `
"/* This file was automatically generated and should not be edited */
// tslint:disable
/* eslint-disable */

import {
  GeneratedValidation,
  ValidationConfig,
  PartialValidationConfig,
  ValidationError,
  ValidationException,
  ValidationType,
  Data,
  UserContext,
  getConfig,
  mergeDeep,
  requiredOneOfValidator,
  typeValidator,
  minLengthValidator,
  maxLengthValidator,
  trimValidator,
  minValidator,
  maxValidator,
  integerValidator,
  lessThanValidator,
  positiveValidator,
  equalValidator,
  emailValidator,
  matchValidator,
  urlValidator,
  lowercaseValidator,
  uppercaseValidator,
  floatValidator
} from 'ts-generate-validator';

import { UserType } from './../../../type/model';

import { User } from './../../../model';

export const validateUser: GeneratedValidation = <D extends Data = typeof User, C extends UserContext = UserContext>(
  data: D,
  configArg?: PartialValidationConfig,
  context?: C,
  propNamePrefix: string = ''
) => {
  const config = <ValidationConfig>mergeDeep({}, getConfig(), configArg ?? {});
  const errors: ValidationError[] = [];
  const validationChain = [
    () =>
      requiredOneOfValidator({
        property: null,
        propertyName: \`\${propNamePrefix}\`,
        data,

        config,
        context,

        fields: ['email', 'phone']
      }),

    () =>
      typeValidator({
        property: data?.name,
        propertyName: \`\${propNamePrefix}name\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      minLengthValidator({
        property: data?.name,
        propertyName: \`\${propNamePrefix}name\`,
        data,
        optional: false,
        config,
        context,

        threshold: 2
      }),

    () =>
      maxLengthValidator({
        property: data?.name,
        propertyName: \`\${propNamePrefix}name\`,
        data,
        optional: false,
        config,
        context,

        threshold: 50
      }),

    () =>
      trimValidator({
        property: data?.name,
        propertyName: \`\${propNamePrefix}name\`,
        data,
        optional: false,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.surname,
        propertyName: \`\${propNamePrefix}surname\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      minLengthValidator({
        property: data?.surname,
        propertyName: \`\${propNamePrefix}surname\`,
        data,
        optional: false,
        config,
        context,

        threshold: 2,

        customMessage: 'surname length must be more then 2 letters'
      }),

    () =>
      maxLengthValidator({
        property: data?.surname,
        propertyName: \`\${propNamePrefix}surname\`,
        data,
        optional: false,
        config,
        context,

        threshold: 50,

        customMessage: 'surname length must be less then 50 letters'
      }),

    () =>
      trimValidator({
        property: data?.surname,
        propertyName: \`\${propNamePrefix}surname\`,
        data,
        optional: false,
        config,
        context,

        customMessage: 'there should be no spaces at the beginning and at the end of surname'
      }),

    () =>
      typeValidator({
        property: data?.age,
        propertyName: \`\${propNamePrefix}age\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.number,

        typeName: 'number'
      }),

    () =>
      minValidator({
        property: data?.age,
        propertyName: \`\${propNamePrefix}age\`,
        data,
        optional: false,
        config,
        context,

        threshold: 18
      }),

    () =>
      maxValidator({
        property: data?.age,
        propertyName: \`\${propNamePrefix}age\`,
        data,
        optional: false,
        config,
        context,

        threshold: 60
      }),

    () =>
      integerValidator({
        property: data?.age,
        propertyName: \`\${propNamePrefix}age\`,
        data,
        optional: false,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.workExperience,
        propertyName: \`\${propNamePrefix}workExperience\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.number,

        typeName: 'number'
      }),

    () =>
      lessThanValidator({
        property: data?.workExperience,
        propertyName: \`\${propNamePrefix}workExperience\`,
        data,
        optional: false,
        config,
        context,

        targetPropertyName: 'age'
      }),

    () =>
      positiveValidator({
        property: data?.workExperience,
        propertyName: \`\${propNamePrefix}workExperience\`,
        data,
        optional: false,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.isActive,
        propertyName: \`\${propNamePrefix}isActive\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.boolean,

        typeName: 'boolean'
      }),

    () =>
      equalValidator({
        property: data?.isActive,
        propertyName: \`\${propNamePrefix}isActive\`,
        data,
        optional: false,
        config,
        context,

        value: true
      }),

    () =>
      typeValidator({
        property: data?.email,
        propertyName: \`\${propNamePrefix}email\`,
        data,
        optional: true,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      emailValidator({
        property: data?.email,
        propertyName: \`\${propNamePrefix}email\`,
        data,
        optional: true,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.phone,
        propertyName: \`\${propNamePrefix}phone\`,
        data,
        optional: true,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      matchValidator({
        property: data?.phone,
        propertyName: \`\${propNamePrefix}phone\`,
        data,
        optional: true,
        config,
        context,

        regexp: /^\\\\d{10}$/
      }),

    () =>
      typeValidator({
        property: data?.website,
        propertyName: \`\${propNamePrefix}website\`,
        data,
        optional: true,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      urlValidator({
        property: data?.website,
        propertyName: \`\${propNamePrefix}website\`,
        data,
        optional: true,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.nickname,
        propertyName: \`\${propNamePrefix}nickname\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      lowercaseValidator({
        property: data?.nickname,
        propertyName: \`\${propNamePrefix}nickname\`,
        data,
        optional: false,
        config,
        context
      }),

    () =>
      minLengthValidator({
        property: data?.nickname,
        propertyName: \`\${propNamePrefix}nickname\`,
        data,
        optional: false,
        config,
        context,

        threshold: 5
      }),

    () =>
      maxLengthValidator({
        property: data?.nickname,
        propertyName: \`\${propNamePrefix}nickname\`,
        data,
        optional: false,
        config,
        context,

        threshold: 20
      }),

    () =>
      typeValidator({
        property: data?.cardHolderName,
        propertyName: \`\${propNamePrefix}cardHolderName\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.string,

        typeName: 'string'
      }),

    () =>
      uppercaseValidator({
        property: data?.cardHolderName,
        propertyName: \`\${propNamePrefix}cardHolderName\`,
        data,
        optional: false,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.insuranceRatio,
        propertyName: \`\${propNamePrefix}insuranceRatio\`,
        data,
        optional: false,
        config,
        context,

        type: ValidationType.number,

        typeName: 'number'
      }),

    () =>
      floatValidator({
        property: data?.insuranceRatio,
        propertyName: \`\${propNamePrefix}insuranceRatio\`,
        data,
        optional: false,
        config,
        context
      }),

    () =>
      typeValidator({
        property: data?.userType,
        propertyName: \`\${propNamePrefix}userType\`,
        data,
        optional: true,
        config,
        context,

        typeDescription: UserType,

        type: ValidationType.enum,

        typeName: 'UserType'
      })
  ];

  for (const validation of validationChain) {
    try {
      validation();
    } catch (err) {
      if (err instanceof ValidationException) {
        if (config.stopAtFirstError) {
          throw err;
        }

        errors.push(...err.errors);
      } else {
        if (!(err instanceof ValidationError)) {
          throw err;
        }

        errors.push(err);

        if (config.stopAtFirstError) {
          throw new ValidationException(errors);
        }
      }
    }
  }

  if (errors.length) {
    throw new ValidationException(errors);
  }
};
"
`;

exports[`codegen/user parse & prepare: data for render 1`] = `
Array [
  Object {
    "fileName": "model.ts",
    "filePath": "src/generated/validators",
    "imports": Array [
      Object {
        "clauses": "GeneratedValidation, ValidationConfig, PartialValidationConfig, ValidationError, ValidationException, ValidationType, Data, UserContext, getConfig, mergeDeep, requiredOneOfValidator, typeValidator, minLengthValidator, maxLengthValidator, trimValidator, minValidator, maxValidator, integerValidator, lessThanValidator, positiveValidator, equalValidator, emailValidator, matchValidator, urlValidator, lowercaseValidator, uppercaseValidator, floatValidator",
        "path": "ts-generate-validator",
      },
      Object {
        "clauses": "UserType",
        "path": "./../../../type/model",
      },
      Object {
        "clauses": "User",
        "path": "./../../../model",
      },
    ],
    "validations": Array [
      Object {
        "async": false,
        "items": Array [
          Object {
            "propertyName": "",
            "validatorName": "requiredOneOfValidator",
            "validatorPayload": Array [
              Object {
                "property": "fields",
                "type": "array",
                "value": "['email', 'phone']",
              },
            ],
          },
          Object {
            "optional": false,
            "propertyName": "name",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "name",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "name",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "50",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "name",
            "validatorName": "trimValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": false,
            "propertyName": "surname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "surname",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "2",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "surname length must be more then 2 letters",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "surname",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "50",
              },
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "surname length must be less then 50 letters",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "surname",
            "validatorName": "trimValidator",
            "validatorPayload": Array [
              Object {
                "property": "customMessage",
                "type": "string",
                "value": "there should be no spaces at the beginning and at the end of surname",
              },
            ],
          },
          Object {
            "optional": false,
            "propertyName": "age",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.number",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "age",
            "validatorName": "minValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "18",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "age",
            "validatorName": "maxValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "60",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "age",
            "validatorName": "integerValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": false,
            "propertyName": "workExperience",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.number",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "workExperience",
            "validatorName": "lessThanValidator",
            "validatorPayload": Array [
              Object {
                "property": "targetPropertyName",
                "type": "string",
                "value": "age",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "workExperience",
            "validatorName": "positiveValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": false,
            "propertyName": "isActive",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.boolean",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "boolean",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "isActive",
            "validatorName": "equalValidator",
            "validatorPayload": Array [
              Object {
                "property": "value",
                "type": "boolean",
                "value": "true",
              },
            ],
          },
          Object {
            "optional": true,
            "propertyName": "email",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": true,
            "propertyName": "email",
            "validatorName": "emailValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": true,
            "propertyName": "phone",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": true,
            "propertyName": "phone",
            "validatorName": "matchValidator",
            "validatorPayload": Array [
              Object {
                "property": "regexp",
                "type": "",
                "value": "/^\\\\d{10}$/",
              },
            ],
          },
          Object {
            "optional": true,
            "propertyName": "website",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": true,
            "propertyName": "website",
            "validatorName": "urlValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": false,
            "propertyName": "nickname",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "nickname",
            "validatorName": "lowercaseValidator",
            "validatorPayload": Array [],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "nickname",
            "validatorName": "minLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "5",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "nickname",
            "validatorName": "maxLengthValidator",
            "validatorPayload": Array [
              Object {
                "property": "threshold",
                "type": "",
                "value": "20",
              },
            ],
          },
          Object {
            "optional": false,
            "propertyName": "cardHolderName",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.string",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "string",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "cardHolderName",
            "validatorName": "uppercaseValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": false,
            "propertyName": "insuranceRatio",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.number",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "number",
              },
            ],
          },
          Object {
            "async": false,
            "optional": false,
            "propertyName": "insuranceRatio",
            "validatorName": "floatValidator",
            "validatorPayload": Array [],
          },
          Object {
            "optional": true,
            "propertyName": "userType",
            "validatorName": "typeValidator",
            "validatorPayload": Array [
              Object {
                "property": "typeDescription",
                "type": "object",
                "value": "UserType",
              },
              Object {
                "property": "type",
                "type": "object",
                "value": "ValidationType.enum",
              },
              Object {
                "property": "typeName",
                "type": "string",
                "value": "UserType",
              },
            ],
          },
        ],
        "modelClassName": "User",
        "name": "validateUser",
      },
    ],
  },
]
`;

exports[`codegen/user parse & prepare: parsed metadata 1`] = `
Array [
  Object {
    "classes": Array [
      Object {
        "decorators": Array [
          Object {
            "arguments": Array [],
            "name": "Validation",
          },
          Object {
            "arguments": Array [
              Array [
                "email",
                "phone",
              ],
            ],
            "name": "RequiredOneOfValidation",
          },
        ],
        "fields": Array [
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  50,
                ],
                "name": "MaxLengthValidation",
              },
              Object {
                "arguments": Array [],
                "name": "TrimValidation",
              },
            ],
            "name": "name",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  2,
                  "surname length must be more then 2 letters",
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  50,
                  "surname length must be less then 50 letters",
                ],
                "name": "MaxLengthValidation",
              },
              Object {
                "arguments": Array [
                  "there should be no spaces at the beginning and at the end of surname",
                ],
                "name": "TrimValidation",
              },
            ],
            "name": "surname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  18,
                ],
                "name": "MinValidation",
              },
              Object {
                "arguments": Array [
                  60,
                ],
                "name": "MaxValidation",
              },
              Object {
                "arguments": Array [],
                "name": "IntegerValidation",
              },
            ],
            "name": "age",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "age",
                ],
                "name": "LessThanValidation",
              },
              Object {
                "arguments": Array [],
                "name": "PositiveValidation",
              },
            ],
            "name": "workExperience",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  true,
                ],
                "name": "EqualValidation",
              },
            ],
            "name": "isActive",
            "optional": false,
            "type": Object {
              "name": "boolean",
              "validationType": "boolean",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "EmailValidation",
              },
            ],
            "name": "email",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [
                  "/^\\\\d{10}$/",
                ],
                "name": "MatchValidation",
              },
            ],
            "name": "phone",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "UrlValidation",
              },
            ],
            "name": "website",
            "optional": true,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "LowercaseValidation",
              },
              Object {
                "arguments": Array [
                  5,
                ],
                "name": "MinLengthValidation",
              },
              Object {
                "arguments": Array [
                  20,
                ],
                "name": "MaxLengthValidation",
              },
            ],
            "name": "nickname",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "UppercaseValidation",
              },
            ],
            "name": "cardHolderName",
            "optional": false,
            "type": Object {
              "name": "string",
              "validationType": "string",
            },
          },
          Object {
            "decorators": Array [
              Object {
                "arguments": Array [],
                "name": "FloatValidation",
              },
            ],
            "name": "insuranceRatio",
            "optional": false,
            "type": Object {
              "name": "number",
              "validationType": "number",
            },
          },
          Object {
            "decorators": Array [],
            "name": "userType",
            "optional": true,
            "type": Object {
              "name": "UserType",
              "referencePath": "type/model",
              "validationType": "enum",
            },
          },
        ],
        "name": "User",
      },
    ],
    "functions": Array [],
    "imports": Array [
      Object {
        "absPath": "type/model",
        "clauses": Array [
          "UserType",
        ],
      },
      Object {
        "absPath": "../../../src/decorators/index",
        "clauses": Array [
          "EmailValidation",
          "EqualValidation",
          "FloatValidation",
          "IntegerValidation",
          "LessThanValidation",
          "LowercaseValidation",
          "MatchValidation",
          "MaxLengthValidation",
          "MaxValidation",
          "MinLengthValidation",
          "MinValidation",
          "PositiveValidation",
          "RequiredOneOfValidation",
          "TrimValidation",
          "UppercaseValidation",
          "UrlValidation",
          "Validation",
        ],
      },
    ],
    "name": "model.ts",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [],
    "name": "type/model.ts",
  },
  Object {
    "classes": Array [],
    "functions": Array [],
    "imports": Array [],
    "name": "type/model",
  },
  Object {
    "classes": Array [],
    "functions": Array [
      Object {
        "isAsync": false,
        "isExported": false,
        "name": "emptyDecorator",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "RequiredOneOfValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "TypeValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "CustomValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "IgnoreValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "EqualValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "EqualToValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "DateValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "MinValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "MaxValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "NegativeValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "PositiveValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "IntegerValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "BigIntValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "NotBigIntValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "FloatValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "LessThanValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "MoreThanValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "TrimValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "LowercaseValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "UppercaseValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "MinLengthValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "MaxLengthValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "EmailValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "UrlValidation",
      },
      Object {
        "isAsync": false,
        "isExported": true,
        "name": "MatchValidation",
      },
    ],
    "imports": Array [
      Object {
        "absPath": "../../../src/validators/model",
        "clauses": Array [
          "CustomValidationFunction",
        ],
      },
      Object {
        "absPath": "../../../src/codegen/model",
        "clauses": Array [
          "Data",
        ],
      },
      Object {
        "absPath": "../../../src/localization/model",
        "clauses": Array [
          "Message",
        ],
      },
    ],
    "name": "../../../src/decorators/index",
  },
]
`;
